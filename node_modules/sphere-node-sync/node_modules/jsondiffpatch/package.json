{
  "name": "jsondiffpatch",
  "version": "0.0.11",
  "author": {
    "name": "Benjamin Eidelman",
    "email": "beneidel@gmail.com"
  },
  "description": "Diff & Patch for JSON object graphs",
  "contributors": [
    {
      "name": "Benjamin Eidelman",
      "email": "beneidel@gmail.com"
    }
  ],
  "bin": {},
  "scripts": {
    "test": "qunit -c ./src/jsondiffpatch.js -d jsondiffpatch:./src/jsondiffpatch -t ./test/test.js",
    "minify": "uglifyjs ./src/jsondiffpatch.js > ./jsondiffpatch.min.js"
  },
  "main": "./src/jsondiffpatch",
  "repository": {
    "type": "git",
    "url": "git://github.com/benjamine/JsonDiffPatch.git"
  },
  "keywords": [
    "json",
    "diff",
    "patch"
  ],
  "devDependencies": {
    "qunit": "0.5.x",
    "uglify-js": "1.3.x"
  },
  "bundleDependencies": [],
  "license": "MIT",
  "engine": {
    "node": ">=0.4"
  },
  "dependencies": {
    "cli-color": ">=0.1.7"
  },
  "optionalDependencies": {
    "cli-color": ">=0.1.7"
  },
  "engines": {
    "node": "*"
  },
  "homepage": "https://github.com/benjamine/JsonDiffPatch",
  "readme": "JsonDiffPatch\r\n=========\r\n\r\n*Diff & Patch for JavaScript objects and arrays (ie. any JSON serializable structure)*\r\n\r\nJsonDiffPatch is a small library that allows to diff object graphs, create a patch (in pure JSON), and apply it to update an original version.\r\n\r\nNow available on npm:\r\n```\r\nnpm install jsondiffpatch\r\n```\r\n\r\nor\r\n\r\n```\r\nbower install jsondiffpatch\r\n```\r\n-----\r\n**[DEMO](http://benjamine.github.com/JsonDiffPatch/demo/index.htm)**\r\n-----\r\n-----\r\n\r\n- Could be used for logging, audit, remote (client-server) synchronization of changes, etc.\r\n- Minified version is < 6KB\r\n- Works in browsers and server (Node.j or any CommonJS env), open [test page](http://benjamine.github.com/JsonDiffPatch/test/qunit.htm) to check other browsers.\r\n- Automatically detect environment support and load as CommonJS module (eg: node.js), anonymous AMD module (eg: using RequireJS on the browser, no globals), or as browser global.\r\n- For long text diffs uses [google-diff_match_patch](http://code.google.com/p/google-diff-match-patch/) library if loaded (other text diff libs can be plugged in)\r\n- Arrays diffs are smart!\r\n  - Using [LCS](http://en.wikipedia.org/wiki/Longest_common_subsequence_problem) (the same type of algorithm used by popular text diff tools on lines of text) insertions and deletions are detected efficiently.\r\n  - Also detects items moved on the same array (a refinement to LCS). Patching will only move the item in the array, and inner changes in the moved object are diffed/patched too.\r\n  - Works with objects in the array if you provide a hash function, eg: ``` jsondiffpatch.config.objectHash = function(obj) { return obj.id || JSON.stringify(obj); }; ```. ***NOTE: If no objectHash function is configured Array items are compared using just ```===```***, meaning ```{ a: 1 }``` is different from ```{ a: 1 }``` unless they reference the same instance, this is by design, because object equality is a problem without trivial solution. Some use-cases are fine with just ```===``` (the default), others need comparison by an id field, others full JSON stringify, be sure to provide yours if default is not enough, as in DEMO page)\r\n- Reverse a diff and unpatch (eg. revert object to its original state based on diff)\r\n- Optional lib included for visualizing diffs as html\r\n\r\n## Delta Legend\r\n\r\n- Objects on the graph means that it's a node in the diff tree and will continue recursively\r\n  - `_t`: (special member) indicates the type of node, `a` means `array`, otherwise it's an `object`.\r\n  - in arrays, `N` indicates index on the new array, `_N` means index at the original array.\r\n\r\n- Arrays in the delta means that the node has changed\r\n  - `[newValue]` -> added\r\n  - `[oldValue, newValue]` -> modified\r\n  - `[oldValue, 0, 0]` -> deleted\r\n  - `[textDiff, 0, 2]` -> text diff\r\n  - `[\"\", N, 3]` -> element was moved to N\r\n\r\n\r\n###Example\r\n\r\nObject diffing:\r\n\r\n``` javascript\r\n    // sample data\r\n    var country = {\r\n        name: \"Argentina\",\r\n        capital: \"Buenos Aires\",\r\n        independence: new Date(1816, 6, 9),\r\n        unasur: true\r\n    };\r\n\r\n    // clone country, using dateReviver for Date objects\r\n    var country2 = JSON.parse(JSON.stringify(country),jsondiffpatch.dateReviver);\r\n\r\n    // make some changes\r\n    country2.name = \"Rep�blica Argentina\";\r\n    country2.population = \"41324992\";\r\n    delete country2.capital;\r\n\r\n    var delta = jsondiffpatch.diff(country,country2);\r\n\r\n    /*\r\n    delta = {\r\n        \"name\":[\"Argentina\",\"Rep�blica Argentina\"], // old value, new value\r\n        \"population\":[\"41324992\"], // new value\r\n        \"capital\":[\"Buenos Aires\",0,0] // deleted\r\n    }\r\n    */\r\n\r\n    // patch original\r\n    jsondiffpatch.patch(country, delta);\r\n\r\n    // reverse diff\r\n    var reverseDelta = jsondiffpatch.reverse(delta);\r\n    // also country2 can be return to original value with: jsondiffpatch.unpatch(country2, delta);\r\n\r\n    var delta2 = jsondiffpatch.diff(country,country2);\r\n\r\n    // delta2 is undefined, no difference\r\n```\r\n\r\nArray diffing:\r\n\r\n``` javascript\r\n    // sample data\r\n    var country = {\r\n        name: \"Argentina\",\r\n        cities: [\r\n        {\r\n            name: 'Buenos Aires',\r\n            population: 13028000,\r\n        },\r\n        {\r\n            name: 'C�rdoba',\r\n            population: 1430023,\r\n        },\r\n        {\r\n            name: 'Rosario',\r\n            population: 1136286,\r\n        },\r\n        {\r\n            name: 'Mendoza',\r\n            population: 901126,\r\n        },\r\n        {\r\n            name: 'San Miguel de Tucum�n',\r\n            population: 800000,\r\n        }\r\n        ]\r\n    };\r\n\r\n    // clone country\r\n    var country2 = JSON.parse(JSON.stringify(country));\r\n\r\n    // delete C�rdoba\r\n    country.cities.splice(1, 1);\r\n\r\n    // add La Plata\r\n    country.cities.splice(4, 0, {\r\n        name: 'La Plata'\r\n        });\r\n\r\n    // modify Rosario, and move it\r\n    var rosario = country.cities.splice(1, 1)[0];\r\n    rosario.population += 1234;\r\n    country.cities.push(rosario);\r\n\r\n    // match objects by name\r\n    jsondiffpatch.config.objectHash = function(obj) {\r\n        return obj.name;\r\n    }\r\n\r\n    var delta = jsondiffpatch.diff(country,country2);\r\n\r\n    /*\r\n    delta = {\r\n        \"cities\": {\r\n            \"1\": [\r\n                // inserted at index 1\r\n                {\r\n                    \"name\": \"C�rdoba\",\r\n                    \"population\": 1430023\r\n                }]\r\n            ,\r\n            \"2\": {\r\n                // population modified at index 2 (Rosario)\r\n                \"population\": [\r\n                    1137520,\r\n                    1136286\r\n                ]\r\n            },\r\n            \"_t\": \"a\",\r\n            \"_3\": [\r\n                // removed from index 3\r\n                {\r\n                    \"name\": \"La Plata\"\r\n                },0,0],\r\n            \"_4\": [\r\n                // move from index 4 to index 2\r\n                '',2,3]\r\n        }\r\n    }\r\n    */\r\n```\r\n\r\nFor more complex cases (nested objects or arrays, long text diffs) check unit tests in /test/test.js\r\n\r\nTo use as AMD module (eg: using RequireJS on the browser):\r\n\r\n    require('jsondiffpatch', function(jsondiffpatch){\r\n\r\n        // code using jsondiffpatch\r\n\r\n    });\r\n\r\n    // a module that depends on jsondiffpatch\r\n    define('mytexteditor.visualcomparer', ['jsondiffpatch'], function(jsondiffpatch){\r\n\r\n        // module implementation using jsondiffpatch\r\n\r\n    });\r\n\r\n\r\n\r\nTargeted platforms\r\n----------------\r\n\r\n* Tested on Chrome, FireFox, IE7+, to check other browsers open [test page](http://benjamine.github.com/JsonDiffPatch/test/qunit.htm) to run unit tests.\r\n* Node.js\r\n\r\n[QUnit](http://docs.jquery.com/Qunit) is used for unit testing.\r\nJust open the [test page](http://benjamine.github.com/JsonDiffPatch/test/qunit.htm) on your preferred browser.\r\n\r\nTo run tests on Node.js on jsondiffpatch root folder:\r\n\r\n```\r\n    npm i\r\n    npm test\r\n```\r\n\r\nMinification\r\n----------------\r\n\r\nA minified version is provided as jsondiffpatch.min.js\r\nTo regenerate that file run (npm i is required as uglifyjs is used):\r\n\r\n```\r\n    npm i\r\n    npm run-script minify\r\n```\r\n\r\nIncluding JsonDiffPatch in your application\r\n---------------\r\n\r\nInstall using npm:\r\n\r\n```\r\nnpm install jsondiffpatch\r\n```\r\n\r\nor, Download the latest release from the web site (http://github.com/benjamine/JsonDiffPatch) and copy\r\n`jsondiffpatch.min.js` to a suitable location. To support text diffs include Google's diff_match_patch.\r\n\r\nThen include it in your HTML\r\nlike so:\r\n\r\n    <script type=\"text/javascript\" src=\"/path/to/jsondiffpatch.min.js\"></script>\r\n    <script type=\"text/javascript\" src=\"/path/to/diff_match_patch_uncompressed.js\"></script>\r\n\r\nNote: you can use JsonDiffPatch on browserless JavaScript environments too (as [Node.js](http://nodejs.org/), or [Mozilla Rhino](http://www.mozilla.org/rhino/)).\r\n\r\nOn Node.js you have to connect your text diff/patch library explicitly. eg:\r\n\r\n    var jsondiffpatch = require('./jsondiffpatch.js');\r\n\r\n    // load google diff_match_patch library for text diff/patch\r\n    jsondiffpatch.config.diff_match_patch = require('./diff_match_patch_uncompressed.js');\r\n\r\n    // use text diff for strings longer than 5 chars\r\n    jsondiffpatch.config.textDiffMinLength = 5;\r\n\r\n    var d = jsondiffpatch.diff({ age: 5, name: 'Arturo' }, {age: 7, name: 'Armando' });\r\n    // d = {\r\n    //   age: [ 5, 7 ],\r\n    //   name: [ '@@ -1,6 +1,7 @@\\n Ar\\n-tur\\n+mand\\n o\\n', 0, 2 ] }\r\n\r\n    console.log(d.name[0])\r\n    // prints:\r\n    // @@ -1,6 +1,7 @@\r\n    // Ar\r\n    // -tur\r\n    // +mand\r\n    //  o\r\n\r\n\r\nVisual Diff\r\n----------------\r\n\r\nTo visualize diffs you can include JsonDiffPatch.Html script + css on your page:\r\n\r\n    <script type=\"text/javascript\" src=\"/path/to/jsondiffpatch.html.js\"></script>\r\n    <link rel=\"stylesheet\" href=\"../src/jsondiffpatch.html.css\" type=\"text/css\" />\r\nNow you can use the jsondiffpatch.html.diffToHtml() function to visualize diffs as html:\r\n\r\n```\r\n    var json1 = JSON.parse($('#json1').val());\r\n    var json2 = JSON.parse($('#json2').val());\r\n    var d = jsondiffpatch.diff(json1, json2);\r\n    $('#myvisualdiffcontainer').empty().append(jsondiffpatch.html.diffToHtml(json1, json2, d));\r\n```\r\n\r\nTo see this in action check the [DEMO](http://benjamine.github.com/JsonDiffPatch/demo/index.htm) page.\r\n\r\nAlso you can generate diffs with jsondiffpatch on your console:\r\n\r\n```\r\njsondiffpatch .\\test\\testdata.json .\\test\\testdata2.json\r\n```\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/benjamine/JsonDiffPatch/issues"
  },
  "_id": "jsondiffpatch@0.0.11",
  "_from": "jsondiffpatch@~0.0.8"
}
