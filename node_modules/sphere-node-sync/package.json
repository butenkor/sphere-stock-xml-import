{
  "name": "sphere-node-sync",
  "description": "Collection of Sync components for SPHERE.IO entities.",
  "version": "0.3.10",
  "keywords": [
    "sphere",
    "api",
    "sync"
  ],
  "homepage": "https://github.com/emmenko/sphere-node-sync",
  "author": {
    "name": "Nicola Molinari",
    "email": "nicola.molinari@commercetools.de"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/emmenko/sphere-node-sync.git"
  },
  "bugs": {
    "url": "https://github.com/emmenko/sphere-node-sync/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/emmenko/sphere-node-sync/blob/master/LICENSE-MIT"
    }
  ],
  "main": "./lib/main",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "build": "grunt build",
    "postpublish": "rm -rf lib",
    "test": "grunt coverage"
  },
  "dependencies": {
    "jsondiffpatch": "~0.0.8",
    "node-logentries": "0.1.2",
    "progress": "~1.1.2",
    "q": "~1.0.0",
    "sphere-node-connect": "~0.2.6",
    "underscore": "~1.5.2"
  },
  "devDependencies": {
    "coveralls": "~2.7.0",
    "grunt": "~0.4.1",
    "grunt-bump": "~0.0.11",
    "grunt-coffeelint": "~0.0.7",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-coffee": "~0.8.2",
    "grunt-contrib-concat": "~0.3.0",
    "grunt-contrib-watch": "~0.5.3",
    "grunt-shell": "~0.6.2",
    "istanbul": "~0.2.3",
    "jasmine-node": "~1.13.0"
  },
  "readme": "# sphere-node-sync\n\n[![Build Status](https://secure.travis-ci.org/emmenko/sphere-node-sync.png?branch=master)](http://travis-ci.org/emmenko/sphere-node-sync) [![NPM version](https://badge.fury.io/js/sphere-node-sync.png)](http://badge.fury.io/js/sphere-node-sync) [![Coverage Status](https://coveralls.io/repos/emmenko/sphere-node-sync/badge.png?branch=master)](https://coveralls.io/r/emmenko/sphere-node-sync?branch=master) [![Dependency Status](https://david-dm.org/emmenko/sphere-node-sync.png?theme=shields.io)](https://david-dm.org/emmenko/sphere-node-sync) [![devDependency Status](https://david-dm.org/emmenko/sphere-node-sync/dev-status.png?theme=shields.io)](https://david-dm.org/emmenko/sphere-node-sync#info=devDependencies)\n\nCollection of Sync components for SPHERE.IO entities\n\n## Getting Started\nInstall the module with: `npm install sphere-node-sync`\n\n```javascript\nvar sync = require('sphere-node-sync')\n\n// or require one of the Sync components\nvar product_sync = require('sphere-node-sync').ProductSync\nvar order_sync = require('sphere-node-sync').OrderSync\nvar inventory_sync = require('sphere-node-sync').InventorySync\n```\n\n## Documentation\nThe module exposes many collection `Sync` objects, _resource-specific_, and it's used to build update actions for that resource. Available resources are:\n\n- *products* - `ProductSync`\n- *orders* - `OrderSync`\n- *inventory* - `InventorySync`\n\n> All `Sync` objects share the same implementation, only the _mapping_ of the *actions update* is resource-specific. **I will assume from now on (for the sake of simplicity) that the `Sync` is either an instance of one of the resources listed above.**\n\n\n### Rest connector\nIt's _recommended_ to use the `Sync` together with the [sphere-node-connect](https://github.com/emmenko/sphere-node-connect) module.\nIn fact it has a dependency to the module so that you can make requests by using the instance of the `Rest` class.\n\n```javascript\n// https://github.com/emmenko/sphere-node-connect#documentation\nvar sync = new Sync({}) // refer to the Rest arguments (sphere-node-connect) if you want to pass options\n\nsync._rest.GET ...\n```\n> The **credentials are optional**, if you don't pass them the `Rest` connector won't be instantiated.\n\n\n### Error handling\nPlease refer to the connector [documentation](https://github.com/emmenko/sphere-node-connect#error-handling).\n\n\n### Methods\n\nFollowing methods are accessible from the object.\n\n#### `buildActions`\nThere is basically one main method `buildActions` which expects **2 valid JSON objects**, here is the signature:\n\n```javascript\nbuildActions = function(new_obj, old_obj) {\n  // ...\n  return this;\n}\n```\nThe method returns a reference to the current object `Sync`, so that you can chain it with optional methods `get` and `update`.\n> The important data (actions, etc) is stored in a variable of the Sync class and accessible with `_data`.\n\n#### `get`\nIt's a wrapper of the `_data` object and returns one of its values given a `key`.\nAvailable keys:\n```javascript\n_data = {\n  \"update\": {...}, // the update actions object, undefined if there is no update\n  \"updateId\": \"...\" // the id of the product to be updated\n}\n\n// example\nsync.get() // return _data.update\nsync.get(\"updateId\") // return _data.updateId\n\n// or chain it\nsync.buildActions(new_obj, old_obj).get()\n```\n\n#### `update`\nIt will send an update request to the resource, using the `id` of the `old_obj` passed in the `buildActions`.\nIt's recommended to use it by chaining it with the `buildActions` method.\nIf a callback is given it will pass [following arguments](https://github.com/mikeal/request#requestoptions-callback): `(error, response, body)`\n\n> It will throw an `Error` if no credentials were given to the `Sync` object.\n\n```javascript\nsync.buildActions(new_obj, old_obj).update(function(e, r, b){\n  // do something\n})\n```\n\n## Supported Update actions\nCurrently following actions are supported\n\n### ProductSync\n\n- `changeName` - field `name`\n- `changeSlug` - field `slug`\n- `setDescription` - field `description`\n- `removePrice` - field `prices` (all variants)\n- `addPrice` - field `prices` (all variants)\n- `setAttribute` - field `attributes` (all variants)\n\n### OrderSync\n\n- `changeOrderState` - field `orderState`\n- `changePaymentState` - field `paymentState`\n- `changeShipmentState` - field `shipmentState`\n\n### InventorySync\n\n- `addQuantity` - field `quantityOnStock` is more than before\n- `removeQuantity` - field `quantityOnStock` is less than before\n\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Releasing\nReleasing a new version is completely automated using the Grunt task `grunt release`.\n\n```javascript\ngrunt release // patch release\ngrunt release:minor // minor release\ngrunt release:major // major release\n```\n\n## Styleguide\nWe <3 CoffeeScript! So please have a look at this referenced [coffeescript styleguide](https://github.com/polarmobile/coffeescript-style-guide) when doing changes to the code.\n\n## License\nCopyright (c) 2013 Nicola Molinari\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "sphere-node-sync@0.3.10",
  "dist": {
    "shasum": "8a01054085d4bdacbd94f67a138f49180241c02e"
  },
  "_from": "sphere-node-sync@0.3.10",
  "_resolved": "https://registry.npmjs.org/sphere-node-sync/-/sphere-node-sync-0.3.10.tgz"
}
